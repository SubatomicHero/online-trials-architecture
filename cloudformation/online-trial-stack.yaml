---
  AWSTemplateFormatVersion: 2010-09-09
  Description: "Online Trial Stack. Everything needed to deploy a single trial stack"
  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: Trial Environment Configuration
          Parameters:
            - TrialInstanceType
            - AdminUsername
            - AdminPassword
        - Label:
            default: Control Architecture Configuration
          Parameters:
            - ControlArchitectureName
        - Label:
            default: CI parameters
          Parameters:
            - BambooAMIID
  Parameters:
    AdminUsername:
      Type: String
      Description: The username of the admin user needed to make internal API calls
    AdminPassword:
      Type: String
      Description: The password of the admin use rneeded to make internal API calls
      NoEcho: True
    BambooAMIID:
      Type: String
      Description: An AMI produced by Bamboo to be used in the pipeline
      Default: BuildMe
    ControlArchitectureName:
      Description: The name of the Online Trial Control architecture cloudformation stack
      Type: String
      MinLength: 1
      Default: online-trial-control-test
    TrialInstanceType:
      Description: The type of EC2 instance to deploy the AMI to
      Type: String
      Default: t2.medium
      MinLength: 1
      AllowedValues:
        - t2.medium
        - t2.large
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
  Mappings:
    sshkey:
      us-east-1:
        name: salty-trials
      eu-west-1:
        name: trials-dr-key
    ami:
      us-east-1:
        id: ami-ef306294
      eu-west-1:
        id: ami-6eee0617
  Conditions:
    UseBambooAmi: !Not [!Equals [!Ref BambooAMIID, BuildMe]]
  Resources:
    TrialRoute53DomainNameGenCustomResource:
      Type: Custom::DomainName
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-DomainNameGenerator"
    TrialSubnetIdAllocatorCustomResource:
      Type: Custom::GetSubnetId
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-SubnetAllocator"
    TrialEc2Instance:
      Type: AWS::EC2::Instance
      CreationPolicy:
        ResourceSignal:
          Timeout: PT45M
          Count: 1
      Properties:
        IamInstanceProfile: aws-opsworks-ec2-role
        ImageId: !If [UseBambooAmi, !Ref BambooAMIID, !FindInMap [ami, !Ref "AWS::Region", id]]
        InstanceType: !Ref TrialInstanceType
        KeyName: !FindInMap [sshkey, !Ref "AWS::Region", name]
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksLayerSecurityGroups"
        SourceDestCheck: true
        SubnetId: !GetAtt TrialSubnetIdAllocatorCustomResource.SubnetId
        Tags:
          - Key: Account
            Value: !Ref AWS::AccountId
          - Key: Name
            Value: !Sub "${TrialRoute53DomainNameGenCustomResource.DomainName}.trial-ALFRESCO1"
          - Key: Allocated
            Value: false
          - Key: Stage
            Value:
              Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksDeploymentStage"
          - Key: ExpiryDate
            Value: !GetAtt TrialRoute53DomainNameGenCustomResource.ExpiryDate
        UserData:
          Fn::Base64:
            Fn::Join:
              - ''
              - - !Sub |
                  #!/bin/bash -x
                  /usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10
                  RESULT=0
                  TIMEOUT=45
                  echo "Prepping json file for first chef run"
                  cd /etc/chef
                  cat > run-chef-client.json << EOF
                  {
                    "name": "localhost",
                    "artifact-deployer" : {
                        "awscli" : {
                            "credentials_databag" :"aws",
                            "credentials_databag_item" : "salty"
                        }
                    },
                    "resolver" : {
                        "search" : "alfresco.pri ec2.internal",
                        "nameservers" : ["8.8.8.8", "8.26.56.26"],
                        "lock_resolver_conf" : true
                    },
                    "hosts" : {
                        "hostname" : "${TrialRoute53DomainNameGenCustomResource.DomainName}.trial",
                        "domain" : "alfresco.com",
                        "host_list" : {
                            "minislaven1 minislaven1.alfresco.pri" : "10.80.217.144",
                            "syslogp syslogp.trial-alfresco1 syslogp.trial-alfresco1.alfresco.pri" : "10.0.9.99"
                        }
                    },
                    "salty" : {},
                    "alfresco" : {
                        "public_hostname" : "${TrialRoute53DomainNameGenCustomResource.DomainName}.trial.alfresco.com",
                        "certs" : {
                          "ssl_databag" : "ssl",
                          "ssl_databag_item" : "saltydog_com"
                        }
                    },
                    "cwlogs": {
                      "region": "${AWS::Region}",
                      "use_gzip_http_content_encoding": false
                    },
                    "rsyslog" : {
                        "server_ip" : "syslogp"
                    },
                    "run_list": [
                        "img-trials::run-chef-client"
                    ]
                  }
                  EOF
                  echo "File prepped for first chef run."
                  echo "Running Chef for the first time"
                  chef-client -z -j run-chef-client.json
                  RESULT=$?
                  echo "Current result is $RESULT after initial Chef run"
                  if [[ "$RESULT" == 0 ]]; then
                - opsworks_stackid=
                - Fn::ImportValue: !Sub ${ControlArchitectureName}-OpsWorksStackId
                - "\n"
                - "aws opsworks register --stack-id ${opsworks_stackid}"
                - !Sub " --infrastructure-class ec2 --region us-east-1 --local --use-instance-profile"
                - "\n"
                - !Sub |
                  else
                    echo "Chef run failed. Result is $RESULT"
                    /usr/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                    exit $RESULT
                  fi
                  if [[ "$RESULT" == 0 ]]; then
                    echo "Waiting for Share..."
                    ITERATION=0
                    COMMAND="curl -s -o /dev/null -I -w %{http_code} 127.0.0.1:8081/share/page"
                    while HTTPCODE=$($COMMAND); [[ $HTTPCODE != 200 ]];
                    do
                      if [[ $ITERATION -eq $TIMEOUT ]]; then
                        echo "Share timeout after $TIMEOUT minutes."
                        RESULT=1
                        break
                      fi
                      echo "HTTPCODE=$HTTPCODE Waiting for Share to come up... $((ITERATION++))/$TIMEOUT"
                      sleep 1m
                    done
                  else
                    echo "Chef run with run-chef-client.json failed. Exiting..."
                    /usr/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                    exit $RESULT
                  fi
                  if [[ "$RESULT" == 0 ]]; then
                    echo "Waiting for Alfresco..."
                    ITERATION=0
                    COMMAND="curl -s -o /dev/null -I -w %{http_code} 127.0.0.1:8070"
                    while HTTPCODE=$($COMMAND); [[ $HTTPCODE != 200 ]];
                    do
                      if [[ $ITERATION -eq $TIMEOUT ]]; then
                        echo "Alfresco timeout after $TIMEOUT minutes."
                        RESULT=1
                        break
                      fi
                      echo "HTTPCODE=$HTTPCODE Waiting for Alfresco to come up... $((ITERATION++))/$TIMEOUT"
                      sleep 1m
                    done
                  else
                    echo "Couldnt reach Share within $TIMEOUT minutes. Exiting..."
                    /usr/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                    exit $RESULT
                  fi
                  # These commands should probably be Cheffed pas part of AMI creation/config. They currently add 5-7 minutes to the wait time
                  if [[ "$RESULT" == 0 ]]; then
                    curl -L -u ${AdminUsername}:${AdminPassword} 'http://${AdminUsername}:${AdminPassword}@localhost:8070/alfresco/service/slingshot/node/search?q=%40name%3A%22Project%20Meeting%20Minutes%22&lang=lucene&store=workspace%3A%2F%2FSpacesStore'
                  else
                    echo "Couldnt reach Alfresco within $TIMEOUT minutes. Exiting..."
                    /usr/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                    exit $RESULT
                  fi
                  # Register this instance with the correct OpsWorks Layer
                  if [[ "$RESULT" == 0 ]]; then
                  # make sure the status is registered before proceeding
                - " STATUS=$(aws opsworks describe-instances --stack-id ${opsworks_stackid}"
                - !Sub " --region us-east-1 --query 'Instances[?Hostname==`${TrialRoute53DomainNameGenCustomResource.DomainName}`].Status' --output text)"
                - "\n"
                - !Sub |
                  while [[ "$STATUS" != "registered" ]];
                  do
                    sleep 10
                - "   STATUS=$(aws opsworks describe-instances --stack-id ${opsworks_stackid}"
                - !Sub " --region us-east-1 --query 'Instances[?Hostname==`${TrialRoute53DomainNameGenCustomResource.DomainName}`].Status' --output text)"
                - "\n done\n"
                - " INSTANCEID=$(aws opsworks describe-instances --stack-id ${opsworks_stackid}"
                - !Sub " --region us-east-1 --query 'Instances[?Hostname==`${TrialRoute53DomainNameGenCustomResource.DomainName}`].InstanceId' --output text)"
                - "\n"
                - !Sub "  aws opsworks --region us-east-1 assign-instance --instance-id "
                - "${INSTANCEID} --layer-ids "
                - Fn::ImportValue: !Sub ${ControlArchitectureName}-OpsWorksLayerId
                - "\n"
                - !Sub |
                  fi
                  # send result to cloudformation
                  echo "RESULT is $RESULT, sending signal to cloudformation"
                  /usr/bin/cfn-signal -e $RESULT --stack ${AWS::StackName} --resource TrialEc2Instance --region ${AWS::Region}
                  # Add Wazuh agent installation, configuration and provisioning
                  # script only accessible from trials VPC
                  # curl -s https://s3.amazonaws.com/online-trial-control-ttp/installation-wazuh-agent-mode.sh | bash -s --
                  # Add Suricata and Evebox agent installation, configuration and provisioning
                  # script only accessible from trials VPC
                  # curl -s https://s3.amazonaws.com/online-trial-control-ttp/installation-suricata-agent-mode.sh | bash -s --
    TrialOpsWorksRegisterHandlerCustomResource:
      Type: Custom::OpsWorksRegister
      DependsOn:
        - TrialEc2Instance
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorkRegister"
        Hostname: !GetAtt TrialRoute53DomainNameGenCustomResource.DomainName
    TrialOpsWorksInitInstanceCookbookCustomResource:
      Type: Custom::OpsWorksCookbookInstaller
      Properties:
        ServiceToken:
          Fn::ImportValue: !Sub "${ControlArchitectureName}-CookbookRunner"
        InstanceId: !GetAtt TrialOpsWorksRegisterHandlerCustomResource.InstanceId
  Outputs:
    Type:
      Description: The type of stack this is.
      Value: Trial
    InstanceId:
      Description: The id of the EC2 instance created by this stack
      Value: !Ref TrialEc2Instance
    PublicIp:
      Description: The Public IP of the EC2 instance. Handy for quick ssh'ing
      Value: !GetAtt TrialEc2Instance.PublicIp
    Url:
      Description: The Public Url that allows users access
      Value: !Sub "https://${TrialRoute53DomainNameGenCustomResource.DomainName}.trial.alfresco.com"
    Stage:
      Description: The environment this stack has been deployed to; test or prod
      Value:
        Fn::ImportValue: !Sub "${ControlArchitectureName}-OpsWorksDeploymentStage"
    
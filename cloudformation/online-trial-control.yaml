---
  AWSTemplateFormatVersion: 2010-09-09
  Description: "Control Architecture for allocating and managing Online Trials"
  Parameters:
    APICertArn:
      Type: String
      Description: The ARN of the certificate to use when creating a custom domain name for the API gateway
      MinLength: 83
      Default: arn:aws:acm:us-east-1:179276412545:certificate/4f68e66a-9e6a-45e2-9945-ac880e6a21df
    APIDomainName:
      Type: String
      Description: The API Domain name to use IF this template is being created by Bamboo
    CreatedBy:
      Type: String
      Description: A parameter used in a condition to decide which domain names to create for API gateway
      Default: Other
      AllowedValues:
        - Other
        - Bamboo
    LambdaBucket:
      Type: String
      Description: The name of the bucket that contains the Lambdas to download
      MinLength: 8
      Default: online-trial-devops-lambda
    MinimumStackCount:
      Type: Number
      Description: The minimum number of stacks we want to have running in our "pool".
      Default: 5
    OpsWorksGitRepo:
      Type: String
      Description: The repo that contains the Chef recipes we use for patching the trial stacks
      MinLength: 10
      Default: git@github.com:Alfresco/opsworks-onlinetrials.git
    OpsWorksGitRepoBranch:
      Type: String
      Description: The Branch/Revision of the OpsWorksGitRepo
      Default: develop
    OpsWorksGitSSHKey:
      Type: CommaDelimitedList
      Description: The Deploy PRIVATE key already created for the repo. Change SSH key newlines to commas
      NoEcho: true
      Default: " "
    OpsWorksLayerSecurityGroups:
      Type: String
      Description: A security group to add to the OpsWorks layer in addition to the default.
      Default: sg-01f5d264
    Stage:
      Type: String
      Description: The stage we are deploying to; either test or prod.
      Default: test
      AllowedValues:
        - test
        - prod
    URI:
      Type: String
      Description: The URI that all requests for trials will be made to.
      Default: online-trial
      MinLength: 4
    OnlineTrialsVPCId:
      Type: String
      Description: The VPC Id that the OpsWork Stack will be deployed to. Must be the same as the trials
      MinLength: 12
      Default: vpc-80b606e5
    OnlineTrialsSubnetId:
      Type: String
      Description: A list of subnets. Must be associated with the Vpc Id.
      MinLength: 15
      Default: subnet-ac7f8ff5
      AllowedValues:
        - subnet-ac7f8ff5
        - subnet-6745564f
        - subnet-549c4d23
        - subnet-e94076d3
  Conditions:
    UseDomainName: !Equals [!Ref CreatedBy, Bamboo]
  Resources:
    OnlineTrialRequestAPI:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Description: API that consumes requests for Online Trial stacks
        Name: OnlineTrialAPI
    OnlineTrialRequestResource:
      Type: AWS::ApiGateway::Resource
      DependsOn:
       - OnlineTrialRequestAPI
      Properties:
        ParentId: !GetAtt OnlineTrialRequestAPI.RootResourceId
        PathPart: !Ref URI
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestSQS:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 86400 # 24 hours
        # QueueName omitted so this resource can be updated
    OnlineTrialInstanceRequestSQS:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 86400
    OnlineTrialAssignUserHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialInstanceRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialInstanceRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialAssignStackDynamoDbTable}"
    OnlineTrialAssignUserHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialInstanceRequestSQS
        - OnlineTrialAssignStackDynamoDbTable
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Get message from read queue, if any
              // Call Api within the allocated stack to add user using Marketo details
              // If successful call Marketo to update lead as success which triggers email
              // Success
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            api_host: https://453-liz-762.mktorest.com/
            assign_stack_table: !Ref OnlineTrialAssignStackDynamoDbTable
            client_id: 35a7e1a3-5e60-40b2-bd54-674680af2adc
            client_secret: iPPgKiB224jsa02duwPcKy9ox7078P7S
            sqs_read_url: !Ref OnlineTrialInstanceRequestSQS
        Handler: index.handler
        Role: !GetAtt OnlineTrialAssignUserHandlerIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialAssignUserScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialAssignUserHandler
      Properties:
        Description: Polls a queue to assign users to a stack
        ScheduleExpression: cron(0/1 * * * ? *)
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialAssignUserHandler.Arn
            Id: !Ref OnlineTrialAssignUserHandler
    OnlineTrialAssignUserInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialAssignUserScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialAssignUserHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialAssignUserScheduleRule.Arn
    OnlineTrialInstanceRequestHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialInstanceRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialInstanceRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - cloudformation:DescribeStacks
                  Resource:
                    - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
                - Effect: Allow
                  Action:
                    - ec2:DescribeTags
                    - ec2:CreateTags
                  Resource:
                    - "*"
    OnlineTrialRequestDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DependsOn:
        - OnlineTrialRequestSQS
      Properties:
        AttributeDefinitions:
          - AttributeName: LeadId
            AttributeType: "N"
          - AttributeName: Date
            AttributeType: "S"
        KeySchema:
          - AttributeName: LeadId
            KeyType: HASH
          - AttributeName: Date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        # TableName not provided to allow updating/adding to indexes
    OnlineTrialAssignStackDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        AttributeDefinitions:
          - AttributeName: LeadId
            AttributeType: "N"
          - AttributeName: Date
            AttributeType: "S"
        KeySchema:
          - AttributeName: LeadId
            KeyType: HASH
          - AttributeName: Date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    OnlineTrialFulfillmentIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
        - OnlineTrialRequestSNSTopic
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialFulfillmentLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:BatchGetItem # just in case
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialRequestDynamoDbTable}"
    OnlineTrialFulfillmentHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Read from the trial request table for an unfulfilled request
              // Create an object to post to the SNS Topic that contains two keys
              // "source" and "lead". Source is "onlinetrial", "lead" is the lead id from the item
              // Publish that object/message onto the SNS Topic
              // (Fulfillment is satisfied by the trial request handler, not this handler)
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            topic_arn: !Ref OnlineTrialRequestSNSTopic
            trial_request_table: !Ref OnlineTrialRequestDynamoDbTable
        Handler: index.handler # this will need changing once we switch to Lambda
        Role: !GetAtt OnlineTrialFulfillmentIamRole.Arn
        Runtime: nodejs4.3 # Change to python when we start writing the code
        Timeout: 10
    OnlineTrialFulfillmentScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialFulfillmentHandler
      Properties:
        # Name not provided to allow updates
        Description: Polls a DB table for unfulfilled requests and published them to SNS
        ScheduleExpression: cron(0/10 * * * ? *) # Runs every 10 minutes
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialFulfillmentHandler.Arn
            Id: !Ref OnlineTrialFulfillmentHandler
    OnlineTrialFulfillmentInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialFulfillmentScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialFulfillmentHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialFulfillmentScheduleRule.Arn
    OnlineTrialRequestHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialRequestDynamoDbTable}"
    OnlineTrialRequestHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialRequestHandlerIamRole
      Properties:
        # FunctionName not supplied to allow update of this resource
        # Code wont be inline, it will refer to a file in an s3 bucket once written
        Code:
          ZipFile: > 
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // const message = JSON.parse(event.Records[0].Sns.Message);
              console.log(message);
              // Get the message from SNS (as above)
              // if the "source" key in the original request is online trials
              //  Get the lead id property from the message
              //  make a request to Marketo with the lead id
              //  Get the lead details
              //  If successful, add entry to trial_requests dynamo table
              //    Place full request onto queue (env var)
              //    All OK
              //  else retry n times
              //  if n times has passed
              //    request failed, notify IM solution, store unfulfilled entry in DB
              //  else goto success
              // else pass the request directly to the trial stack builder lambda
              // with the appropriate details (TBD)
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            api_host: https://453-liz-762.mktorest.com/
            client_id: 35a7e1a3-5e60-40b2-bd54-674680af2adc
            client_secret: iPPgKiB224jsa02duwPcKy9ox7078P7S
            sqs_url: !Ref OnlineTrialRequestSQS
            trial_request_table: !Ref OnlineTrialRequestDynamoDbTable
        Handler: index.handler # this will need changing once we switch to Lambda
        Role: !GetAtt OnlineTrialRequestHandlerIamRole.Arn
        Runtime: nodejs4.3 # Change to python when we start writing the code
        Timeout: 10
    OnlineTrialInstanceRequestHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Get message from read queue, if any
              // Find unallocated stack
              // Mark it as allocated
              // Pass original message to publish queue with stack id
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            sqs_read_url: !Ref OnlineTrialRequestSQS
            sqs_publish_url: !Ref OnlineTrialInstanceRequestSQS
            stage: !Ref Stage
        Handler: index.handler
        Role: !GetAtt OnlineTrialInstanceRequestHandlerIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialInstanceRequestScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialInstanceRequestHandler
      Properties:
        # Name not provided to allow updates
        Description: Polls a queue for requests
        ScheduleExpression: cron(0/1 * * * ? *) # Runs every minute
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialInstanceRequestHandler.Arn
            Id: !Ref OnlineTrialInstanceRequestHandler
    OnlineTrialInstanceRequestInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialInstanceRequestScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialInstanceRequestHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialInstanceRequestScheduleRule.Arn
    OnlineTrialRequestSNSTopic:
      Type: AWS::SNS::Topic
      DependsOn:
        - OnlineTrialRequestHandler
      Properties:
        DisplayName: Online Trials SNS Topic for requests
        # TopicName left blank. Makes this resource upgradeable
        Subscription:
          - Endpoint: !GetAtt OnlineTrialRequestHandler.Arn
            Protocol: lambda
    OnlineTrialRequestHandlerInvokePermission:
        Type: AWS::Lambda::Permission
        DependsOn:
          - OnlineTrialRequestSNSTopic
        Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref OnlineTrialRequestHandler
          Principal: sns.amazonaws.com
          SourceArn: !Ref OnlineTrialRequestSNSTopic
    OnlineTrialRequestProxyExecRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestSNSTopic
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: APIGatewayAWSProxyExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
    OnlineTrialRequestGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        MethodResponses:
          - StatusCode: 200
        Integration:
          PassthroughBehavior: WHEN_NO_TEMPLATES
          RequestTemplates:
            application/json: "{\n    \"statusCode\": 200\n}"
          IntegrationResponses:
            - StatusCode: 200
          Type: MOCK
        ResourceId: !Ref OnlineTrialRequestResource
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestPostMethod:
      Type: AWS::ApiGateway::Method
      DependsOn:
        - OnlineTrialRequestProxyExecRole
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: POST
        MethodResponses:
          - StatusCode: 200
        Integration:
          Credentials: !GetAtt OnlineTrialRequestProxyExecRole.Arn
          IntegrationHttpMethod: POST
          IntegrationResponses:
            - ResponseTemplates:
                application/json: "#set($inputRoot = $input.path('$')) { }"
              StatusCode: 200
          RequestParameters:
            integration.request.querystring.Message: 'method.request.body'
            integration.request.querystring.TopicArn: 'method.request.header.topicarn'
          Type: AWS
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
        RequestParameters:
          method.request.querystring.Message: true
          method.request.header.topicarn: true
        ResourceId: !Ref OnlineTrialRequestResource
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - OnlineTrialRequestGetMethod
        - OnlineTrialRequestPostMethod
      Properties:
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestStage:
      Type: AWS::ApiGateway::Stage
      DependsOn:
        - OnlineTrialRequestAPI
        - OnlineTrialRequestDeployment
      Properties:
        DeploymentId: !Ref OnlineTrialRequestDeployment
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            MetricsEnabled: true
            ResourcePath: "/*"
        RestApiId: !Ref OnlineTrialRequestAPI
        StageName: !Ref Stage
    OnlineTrialRequestApiKey:
      Type: AWS::ApiGateway::ApiKey
      DependsOn:
       - OnlineTrialRequestStage
      Properties:
        # By not specifying a name, it allows this resource to be upgradeable
        Description: Used to secure access to our Online Trial APIs
        Enabled: true
        StageKeys:
          - RestApiId: !Ref OnlineTrialRequestAPI
            StageName: !Ref Stage
    OnlineTrialRequestUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      DependsOn:
        - OnlineTrialRequestStage
      DeletionPolicy: Retain # Until a bug is fixed that deletes this properly
      Properties:
        ApiStages:
          - ApiId: !Ref OnlineTrialRequestAPI
            Stage: !Ref Stage
        Description: Online Trial Usage Plan
        Quota:
          Limit: 500
          Period: MONTH
        UsagePlanName: Plan_Online_Trials
    OnlineTrialRequestCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ApiGatewayLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: APIGatewayAWSProxyExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
    OnlineTrialRequestAccount:
      Type: AWS::ApiGateway::Account
      DependsOn:
        - OnlineTrialRequestCloudWatchLogsRole
      Properties:
        CloudWatchRoleArn: !GetAtt OnlineTrialRequestCloudWatchLogsRole.Arn
    OnlineTrialLifecycleIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialLifecycleLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialLifecycleStopEc2Policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:StopInstances
                  Resource:
                    - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
          - PolicyName: OnlineTrialLifecycleDescribeEc2Policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeInstanceStatus
                  Resource:
                    - !Sub "*"
          - PolicyName: OnlineTrialLifecycleCloudformationPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:DescribeStacks
                    - cloudformation:ListStacks
                    - cloudformation:DeleteStack
                    - cloudformation:UpdateStack
                  Resource:
                    - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
    OnlineTrialLifecycleHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialLifecycleIamRole
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Query all CloudFormation stacks, for each trial stack
              //  Check the expiration date tag on the instance
              //  if the expiration has passed now
              //    check the state of the stack
              //    if the state is "running"
              //      update the expiration date tag to 3 days from now
              //      stop the instance
              //    if the state is "stopped"
              //      terminate the stack
              callback(null, 'Hello from Lambda');
            };
        Handler: index.handler
        Role: !GetAtt OnlineTrialLifecycleIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialLifecycleScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialLifecycleHandler
      Properties:
        # Name not provided to allow updates
        Description: Once per day, checks the cloudformation stacks for expiration
        ScheduleExpression: cron(0 1 * * ? *) # Runs every day at 1am UTC
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialLifecycleHandler.Arn
            Id: !Ref OnlineTrialLifecycleHandler
    OnlineTrialLifecycleInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialLifecycleScheduleRule
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref OnlineTrialLifecycleHandler
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialLifecycleScheduleRule.Arn
    OnlineTrialStackTemplateBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain  # deleted by the custom lambda
      Properties:
        AccessControl: BucketOwnerFullControl
        Tags:
          - Key: Name
            Value: Online Trials Template Bucket
        VersioningConfiguration:
          Status: Enabled
    OnlineTrialStackBuilderIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialStackTemplateBucket
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - s3.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialStackBuilderLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialStackBuilderExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:CreateStack
                    - cloudformation:ListStacks
                    - cloudformation:DescribeStacks
                  Resource:
                    - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
          - PolicyName: OnlineTrialStackBuilderBucketReaderPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}"
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}/*"
    OnlineTrialScheduledStackBuilder:
      Type: AWS::Lambda::Function
      # should depend on opswork app
      DependsOn:
        - OnlineTrialStackBuilderIamRole
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // Check the payload received (in the event object)
              // if the "source" is "aws.events"
              //  Check we have at least n stacks running that are unassigned (tag)
              //  if we have less then n stacks
              //    Work out how many stacks we need to build to get to our Limit
              //    Get the template from the bucket based on the stage
              //    Loop around to build each stack successfully
              //    make sure we are tagging the stacks as unassigned
              //  else ALL OK
              // else build a stack
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            stack_count: !Ref MinimumStackCount
            template_bucket_name: !Ref OnlineTrialStackTemplateBucket
            template_bucket_key: !Sub "online-trial-stack-${Stage}.yaml"
        Handler: index.handler
        Role: !GetAtt OnlineTrialStackBuilderIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialStackBuilderScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialScheduledStackBuilder
      Properties:
        # Name not provided to allow updates
        Description: Every 5 minutes, check we have enough stacks ready to be assigned
        ScheduleExpression: cron(0/5 * * * ? *) # Runs every 5 minutes
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialScheduledStackBuilder.Arn
            Id: !Ref OnlineTrialScheduledStackBuilder
    OnlineTrialStackBuilderInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialStackBuilderScheduleRule
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref OnlineTrialScheduledStackBuilder
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialStackBuilderScheduleRule.Arn
    OnlineTrialTemplatesBucketHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
       - OnlineTrialStackTemplateBucket
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - s3.amazonaws.com
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialTemplatesBucketHandlerLoggingPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialStackBuilderBucketReaderPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:* # TODO: Needs to only be delete bucket, list versions and delete versions
                  Resource:
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}"
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}/*"
    OnlineTrialTemplateBucketFillerHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialTemplatesBucketHandlerIamRole
      Properties:
        Code:
          ZipFile: |
            from __future__ import print_function
            import json
            import os
            import cfnresponse
            import urllib
            import boto3

            def handler(event, context):
              branch = 'develop' if os.environ['stage'] == 'test' else 'master'
              url = os.environ['url'].format(branch)
              filename = "online-trial-stack-{0}.yaml".format(branch)
              client = boto3.client('s3')
              # if the event is create or update, add a new version of the template to the bucket
              # if the event is delete, do nothing as the EmptyBucketLambda will handle it
              try:
                if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                  result = urllib.urlopen(url)
                  data = result.read()
                  with open("/tmp/{0}".format(filename), "wb") as f:
                    f.write(data)
                  # Upload the file to s3
                  with open("/tmp/{0}".format(filename), "rb") as r:
                    client.upload_fileobj(
                      r, os.environ['bucket_name'], filename
                    )
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as err:
                print("{0}\n".format(err))
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
        Environment:
          Variables:
            bucket_name: !Ref OnlineTrialStackTemplateBucket
            stage: !Ref Stage
            url: "https://git.alfresco.com/alfresco_devops/online-trials-architecture/blob/{0}/cloudformation/online-trial-stack.yaml"
        Handler: index.handler
        Role: !GetAtt OnlineTrialTemplatesBucketHandlerIamRole.Arn
        Runtime: python2.7
        Timeout: 10
    OnlineTrialTemplatesBucketLifeCycleHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialTemplatesBucketHandlerIamRole
      Properties:
        Code:
          S3Bucket: !Ref LambdaBucket
          S3Key: EmptyBucketLambda.zip
        Handler: org.alfresco.devops.EmptyBucktetsLambdaFunctionHandler
        MemorySize: 512
        Role: !GetAtt OnlineTrialTemplatesBucketHandlerIamRole.Arn
        Runtime: java8
        Timeout: 15
    OnlineTrialTemplatesBucketLifecycleCustomResource:
      Type: Custom::EmptyBucket
      DependsOn:
        - OnlineTrialTemplatesBucketLifeCycleHandler
      Properties:
        ServiceToken: !GetAtt OnlineTrialTemplatesBucketLifeCycleHandler.Arn
        BucketName: !Ref OnlineTrialStackTemplateBucket
    OnlineTrialTemplatesBucketFillerCustomResource:
      Type: Custom::BucketFiller
      DependsOn:
        - OnlineTrialTemplateBucketFillerHandler
      Properties:
        ServiceToken: !GetAtt OnlineTrialTemplateBucketFillerHandler.Arn
    OnlineTrialAPICustomDomainNameIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestDeployment
        - OnlineTrialRequestStage
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialDomainHandlerLoggingPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialAPIDomainHandlerPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - apigateway:POST
                    - apigateway:GET
                    - apigateway:DELETE
                  Resource: 
                    - !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames"
                    - !If [UseDomainName, !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/${APIDomainName}",
                     !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/request${Stage}.trial.alfresco.com"]
          - PolicyName: OnlineTrialCloudfrontPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - cloudfront:UpdateDistribution
                  Resource: "*"
    OnlineTrialAPICustomDomainNameHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialAPICustomDomainNameIamRole
      Properties:
        Code:
          S3Bucket: !Ref LambdaBucket
          S3Key: ApiDomainName.zip
        Environment:
          Variables:
            certificate_arn: !Ref APICertArn
            domain_name: !If [UseDomainName, !Ref APIDomainName, !Sub "request${Stage}.trial.alfresco.com"]
        Handler: api_domain_name.handler
        Role: !GetAtt OnlineTrialAPICustomDomainNameIamRole.Arn
        Runtime: python2.7
        Timeout: 10
    OnlineTrialAPICustomDomainCustomResource:
      Type: Custom::APIDomainName
      DependsOn:
        - OnlineTrialAPICustomDomainNameHandler
      Properties:
        ServiceToken: !GetAtt OnlineTrialAPICustomDomainNameHandler.Arn
    OnlineTrialAPIBasepathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn:
        - OnlineTrialRequestAPI
        - OnlineTrialRequestStage
        - OnlineTrialAPICustomDomainCustomResource
      Properties:
        BasePath: " " # Workaround for CF bug. Unless specified, even if empty/none is required, delete will fail.
        DomainName: !If [UseDomainName, !Ref APIDomainName, !Sub "request${Stage}.trial.alfresco.com"]
        RestApiId: !Ref OnlineTrialRequestAPI
        Stage: !Ref Stage
    OnlineTrialOpsWorksUser:
      Type: AWS::IAM::User
      Properties:
        Policies:
        - PolicyName: OpsWorksAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - opsworks:DescribeStacks
                  - opsworks:DescribeStackProvisioningParameters
                  - opsworks:DescribeInstances
                  - opsworks:AssignInstance
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:CreateGroup
                  - iam:CreateUser
                  - iam:AddUserToGroup
                  - iam:PutUserPolicy
                  - iam:CreateAccessKey
                Resource: "*"
    OnlineTrialOpsWorksKeys:
      Type: AWS::IAM::AccessKey
      DependsOn:
        - OnlineTrialOpsWorksUser
      Properties:
        UserName: !Ref OnlineTrialOpsWorksUser
    OnlineTrialOpsWorksEc2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - opsworks.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialOpsWorksRegistrationPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - opsworks:DescribeStackProvisioningParameters
                    - opsworks:DescribeStacks
                    - opsworks:RegisterInstance
                  Resource: 
                    - "*"
          - PolicyName: OnlineTrialOpsWorksEc2Policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeInstances
                  Resource:
                    - "*"
          - PolicyName: OnlineTrialOpsWorksIamPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - iam:CreateGroup
                    - iam:CreateUser
                    - iam:AddUserToGroup
                    - iam:PutUserPolicy
                    - iam:CreateAccessKey
                  Resource:
                    - "*"
    OnlineTrialOpsWorksInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      DependsOn:
        - OnlineTrialOpsWorksEc2Role
      Properties:
        Roles:
          - !Ref OnlineTrialOpsWorksEc2Role
    OnlineTrialOpsWorksStack:
      Type: AWS::OpsWorks::Stack
      DependsOn:
        - OnlineTrialOpsWorksInstanceProfile
      Properties:
        ConfigurationManager:
          Name: Chef
          Version: 12
        CustomCookbooksSource:
          Revision: !Ref OpsWorksGitRepoBranch
          SshKey: !Join [ "\n" , !Ref OpsWorksGitSSHKey ]
          Type: git
          Url: !Ref OpsWorksGitRepo
        DefaultInstanceProfileArn:
          Fn::Join:
            - ''
            - - "arn:aws:iam::"
              - !Ref "AWS::AccountId"
              - ":instance-profile/"
              - !Ref OnlineTrialOpsWorksInstanceProfile
        DefaultOs: Custom
        DefaultRootDeviceType: ebs
        DefaultSubnetId: !Ref OnlineTrialsSubnetId
        Name: !Sub "OnlineTrialOpsWorksStack-${Stage}"
        ServiceRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-opsworks-service-role" # current default
        UseCustomCookbooks: true
        UseOpsworksSecurityGroups: true
        VpcId: !Ref OnlineTrialsVPCId
    OnlineTrialOpsWorksAlfrescoLayer:
      Type: AWS::OpsWorks::Layer
      DependsOn:
        - OnlineTrialOpsWorksStack
      Properties:
        AutoAssignElasticIps: false
        AutoAssignPublicIps: true
        CustomInstanceProfileArn:
          Fn::Join:
            - ''
            - - "arn:aws:iam::"
              - !Ref "AWS::AccountId"
              - ":instance-profile/"
              - !Ref OnlineTrialOpsWorksInstanceProfile
        CustomSecurityGroupIds:
          - !Ref OpsWorksLayerSecurityGroups
        EnableAutoHealing: true
        Name: !Sub "AlfrescoLayer-${Stage}"
        Shortname: !Sub "otalf-${Stage}"
        StackId: !Ref OnlineTrialOpsWorksStack
        Type: custom
  Outputs:
    DistributionName:
      Description: The CloudFront distribution name to point a R53 entry to.
      Value: !GetAtt OnlineTrialAPICustomDomainCustomResource.DistributionName
    OnlineTrialsTestEndPoint:
      Description: The URI to send a GET request to that tests the API is up and running.
      Value: !Sub "https://${OnlineTrialRequestAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${URI}"
    OnlineTrialsRequestDomainName:
      Description: The pretty domain name to hand over to marketing.
      Value: !If [UseDomainName, !Sub "https://${APIDomainName}/${URI}", !Sub "https://request${Stage}.trial.alfresco.com/${URI}"]
    TopicArn:
      Description: The ARN of the Topic tied to the API gateway. Needed as a header to make a request (topicarn=)
      Value: !Ref OnlineTrialRequestSNSTopic
    OpsWorksStackId:
      Description: The OpsWorks Stack Id needed for each Trial stack to register to.
      Value: !Ref OnlineTrialOpsWorksStack
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksStackId"
    OpsWorksLayerId:
      Description: The OpsWorks Layer Id needed for each Trial stacks' instance to assign to.
      Value: !Ref OnlineTrialOpsWorksAlfrescoLayer
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksLayerId"
    OpsWorksInstanceProfileName:
      Description: The name of the instance profile to be associated with the EC2 instances
      Value: !Ref OnlineTrialOpsWorksInstanceProfile
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksInstanceProfileName"
    OpsWorksDeploymentStage:
      Description: The Stage that the stacks are being deployed into
      Value: !Ref Stage
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksDeploymentStage"
    OpsWorksAccessKey:
      Description: The access key to call the OpsWorks register command
      Value: !Ref OnlineTrialOpsWorksKeys
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksAccessKey"
    OpsWorksSecretKey:
      Description: The secret key to call the OpsWorks register command
      Value: !GetAtt OnlineTrialOpsWorksKeys.SecretAccessKey
      Export:
        Name: !Sub "${AWS::StackName}-OpsWorksSecretKey"

---
  AWSTemplateFormatVersion: 2010-09-09
  Description: "Control Architecture for allocating and managing Online Trials"
  Parameters:
    Stage:
      Type: String
      Description: The stage we are deploying to; either test or prod.
      ConstraintDescription: Must be either test or prod
      Default: test
      AllowedPattern: "(\\btest\\b|\\bprod\\b)"
      MinLength: 4
      MaxLength: 4
    URI:
      Type: String
      Description: The URI that all requests for trials will be made to.
      Default: online-trial
      MinLength: 4
    MinimumStackCount:
      Type: Number
      Description: The minimum number of stacks we want to have running in our "pool".
      Default: 5
  Resources:
    OnlineTrialRequestAPI:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Description: API that consumes requests for Online Trial stacks
        Name: OnlineTrialAPI
    OnlineTrialRequestResource:
      Type: AWS::ApiGateway::Resource
      DependsOn:
       - OnlineTrialRequestAPI
      Properties:
        ParentId: !GetAtt OnlineTrialRequestAPI.RootResourceId
        PathPart: !Ref URI
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestSQS:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 86400 # 24 hours
        # QueueName omitted so this resource can be updated
    OnlineTrialInstanceRequestSQS:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 86400
    OnlineTrialAssignUserHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialInstanceRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialInstanceRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialAssignStackDynamoDbTable}"
    OnlineTrialAssignUserHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialInstanceRequestSQS
        - OnlineTrialAssignStackDynamoDbTable
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Get message from read queue, if any
              // Call Api within the allocated stack to add user using Marketo details
              // If successful call Marketo to update lead as success which triggers email
              // Success
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            sqs_read_url: !Ref OnlineTrialInstanceRequestSQS
            marketo_url: tbd
            assign_stack_table: !Ref OnlineTrialAssignStackDynamoDbTable
        Handler: index.handler
        Role: !GetAtt OnlineTrialAssignUserHandlerIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialAssignUserScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialAssignUserHandler
      Properties:
        Description: Polls a queue to assign users to a stack
        ScheduleExpression: cron(0/1 * * * ? *)
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialAssignUserHandler.Arn
            Id: !Ref OnlineTrialAssignUserHandler
    OnlineTrialAssignUserInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialAssignUserScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialAssignUserHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialAssignUserScheduleRule.Arn
    OnlineTrialInstanceRequestHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialInstanceRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialInstanceRequestSQS.QueueName}"
    OnlineTrialRequestDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DependsOn:
        - OnlineTrialRequestSQS
      Properties:
        AttributeDefinitions:
          - AttributeName: LeadId
            AttributeType: "N"
          - AttributeName: Date
            AttributeType: "S"
        KeySchema:
          - AttributeName: LeadId
            KeyType: HASH
          - AttributeName: Date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        # TableName not provided to allow updating/adding to indexes
    OnlineTrialAssignStackDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        AttributeDefinitions:
          - AttributeName: LeadId
            AttributeType: "N"
          - AttributeName: Date
            AttributeType: "S"
        KeySchema:
          - AttributeName: LeadId
            KeyType: HASH
          - AttributeName: Date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    OnlineTrialFulfillmentIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
        - OnlineTrialRequestSNSTopic
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialFulfillmentLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:BatchGetItem # just in case
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialRequestDynamoDbTable}"
    OnlineTrialFulfillmentHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Read from the trial request table for an unfulfilled request
              // Create an object to post to the SNS Topic that contains two keys
              // "source" and "lead". Source is "onlinetrial", "lead" is the lead id from the item
              // Publish that object/message onto the SNS Topic
              // (Fulfillment is satisfied by the trial request handler, not this handler)
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            topic_arn: !Ref OnlineTrialRequestSNSTopic
            trial_request_table: !Ref OnlineTrialRequestDynamoDbTable
        Handler: index.handler # this will need changing once we switch to Lambda
        Role: !GetAtt OnlineTrialRequestHandlerIamRole.Arn
        Runtime: nodejs4.3 # Change to python when we start writing the code
        Timeout: 10
    OnlineTrialFulfillmentScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialFulfillmentHandler
      Properties:
        # Name not provided to allow updates
        Description: Polls a DB table for unfulfilled requests and published them to SNS
        ScheduleExpression: cron(0/10 * * * ? *) # Runs every 10 minutes
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialFulfillmentHandler.Arn
            Id: !Ref OnlineTrialFulfillmentHandler
    OnlineTrialFulfillmentInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialFulfillmentScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialFulfillmentHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialFulfillmentScheduleRule.Arn
    OnlineTrialRequestHandlerIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestDynamoDbTable
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: OnlineTrialRequestLambdaExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSQS.QueueName}"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OnlineTrialRequestDynamoDbTable}"
    OnlineTrialRequestHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialRequestHandlerIamRole
      Properties:
        # FunctionName not supplied to allow update of this resource
        # Code wont be inline, it will refer to a file in an s3 bucket once written
        Code:
          ZipFile: > 
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              const message = JSON.parse(event.Records[0].Sns.Message);
              console.log(message);
              // Get the message from SNS (as above)
              // if the "source" key in the original request is online trials
              //  Get the lead id property from the message
              //  make a http request to Marketo with the lead id
              //  Get the lead details
              //  If successful, add entry to trial_requests dynamo table
              //    Place full request onto queue (env var)
              //    All OK
              //  else retry n times
              //  if n times has passed
              //    request failed, notify IM solution, store unfulfilled entry in DB
              //  else goto success
              // else pass the request directly to the trial stack builder lambda
              // with the appropriate details (TBD)
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            sqs_url: !Ref OnlineTrialRequestSQS
            marketo_url: tbd
            trial_request_table: !Ref OnlineTrialRequestDynamoDbTable
        Handler: index.handler # this will need changing once we switch to Lambda
        Role: !GetAtt OnlineTrialRequestHandlerIamRole.Arn
        Runtime: nodejs4.3 # Change to python when we start writing the code
        Timeout: 10
    OnlineTrialInstanceRequestHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialInstanceRequestSQS
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Get message from read queue, if any
              // Find unallocated stack
              // Mark it as allocated
              // Pass original message to publish queue with stack id
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            sqs_read_url: !Ref OnlineTrialRequestSQS
            sqs_publish_url: !Ref OnlineTrialInstanceRequestSQS
        Handler: index.handler
        Role: !GetAtt OnlineTrialInstanceRequestHandlerIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialInstanceRequestScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialInstanceRequestHandler
      Properties:
        # Name not provided to allow updates
        Description: Polls a queue for requests
        ScheduleExpression: cron(0/1 * * * ? *) # Runs every minute
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialInstanceRequestHandler.Arn
            Id: !Ref OnlineTrialInstanceRequestHandler
    OnlineTrialInstanceRequestInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialInstanceRequestScheduleRule
      Properties:
        FunctionName: !Ref OnlineTrialInstanceRequestHandler
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialInstanceRequestScheduleRule.Arn
    OnlineTrialRequestSNSTopic:
      Type: AWS::SNS::Topic
      DependsOn:
        - OnlineTrialRequestHandler
      Properties:
        DisplayName: Online Trials SNS Topic for requests
        # TopicName left blank. Makes this resource upgradeable
        Subscription:
          - Endpoint: !GetAtt OnlineTrialRequestHandler.Arn
            Protocol: lambda
    OnlineTrialRequestHandlerInvokePermission:
        Type: AWS::Lambda::Permission
        DependsOn:
          - OnlineTrialRequestSNSTopic
        Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref OnlineTrialRequestHandler
          Principal: sns.amazonaws.com
          SourceArn: !Ref OnlineTrialRequestSNSTopic
    OnlineTrialRequestProxyExecRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialRequestSNSTopic
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: APIGatewayAWSProxyExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
    OnlineTrialRequestGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          Type: MOCK
        ResourceId: !Ref OnlineTrialRequestResource
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestPostMethod:
      Type: AWS::ApiGateway::Method
      DependsOn:
        - OnlineTrialRequestProxyExecRole
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: POST
        MethodResponses:
          - StatusCode: 200
        Integration:
          Credentials: !GetAtt OnlineTrialRequestProxyExecRole.Arn
          IntegrationHttpMethod: POST
          IntegrationResponses:
            - ResponseTemplates:
                application/json: "#set($inputRoot = $input.path('$')) { }"
              StatusCode: 200
          RequestParameters:
            integration.request.querystring.Message: 'method.request.body'
            integration.request.querystring.TopicArn: 'method.request.querystring.TopicArn'
          Type: AWS
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
        RequestParameters:
          method.request.querystring.Message: true
          method.request.querystring.TopicArn: true
        ResourceId: !Ref OnlineTrialRequestResource
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - OnlineTrialRequestGetMethod
        - OnlineTrialRequestPostMethod
      Properties:
        RestApiId: !Ref OnlineTrialRequestAPI
    OnlineTrialRequestStage:
      Type: AWS::ApiGateway::Stage
      DependsOn:
        - OnlineTrialRequestAPI
        - OnlineTrialRequestDeployment
      Properties:
        DeploymentId: !Ref OnlineTrialRequestDeployment
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            MetricsEnabled: true
            ResourcePath: "/*"
        RestApiId: !Ref OnlineTrialRequestAPI
        StageName: !Ref Stage
    OnlineTrialRequestApiKey:
      Type: AWS::ApiGateway::ApiKey
      DependsOn:
       - OnlineTrialRequestStage
      Properties:
        # By not specifying a name, it allows this resource to be upgradeable
        Description: Used to secure access to our Online Trial APIs
        Enabled: true
        StageKeys:
          - RestApiId: !Ref OnlineTrialRequestAPI
            StageName: !Ref Stage
    OnlineTrialRequestUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      DependsOn:
        - OnlineTrialRequestStage
      DeletionPolicy: Retain # Until a bug is fixed that deletes this properly
      Properties:
        ApiStages:
          - ApiId: !Ref OnlineTrialRequestAPI
            Stage: !Ref Stage
        Description: Online Trial Usage Plan
        Quota:
          Limit: 500
          Period: MONTH
        UsagePlanName: Plan_Online_Trials
    OnlineTrialRequestCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ApiGatewayLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: APIGatewayAWSProxyExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${OnlineTrialRequestSNSTopic.TopicName}"
    OnlineTrialRequestAccount:
      Type: AWS::ApiGateway::Account
      DependsOn:
        - OnlineTrialRequestCloudWatchLogsRole
      Properties:
        CloudWatchRoleArn: !GetAtt OnlineTrialRequestCloudWatchLogsRole.Arn
    OnlineTrialLifecycleIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialLifecycleLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialLifecycleExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:DescribeTags
                    - ec2:CreateTags
                    - ec2:StopInstances
                    - cloudformation:DescribeStacks
                    - cloudformation:DeleteStack
                  Resource:
                    - "arn:aws:ec2:*:*:*"
                    - "arn:aws:cloudformation:*:*:*"
    OnlineTrialLifecycleHandler:
      Type: AWS::Lambda::Function
      DependsOn:
        - OnlineTrialLifecycleIamRole
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // TODO implement and deploy in s3 bucket
              // Query all CloudFormation stacks, for each trial stack
              //  Check the expiration date tag on the instance
              //  if the expiration has passed now
              //    check the state of the stack
              //    if the state is "running"
              //      update the expiration date tag to 3 days from now
              //      stop the instance
              //    if the state is "stopped"
              //      terminate the stack
              callback(null, 'Hello from Lambda');
            };
        Handler: index.handler
        Role: !GetAtt OnlineTrialLifecycleIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialLifecycleScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialLifecycleHandler
      Properties:
        # Name not provided to allow updates
        Description: Once per day, checks the opsworks stacks for expiration
        ScheduleExpression: cron(0 1 * * ? *) # Runs every day at 1am UTC
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialLifecycleHandler.Arn
            Id: !Ref OnlineTrialLifecycleHandler
    OnlineTrialLifecycleInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialLifecycleScheduleRule
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref OnlineTrialLifecycleHandler
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialLifecycleScheduleRule.Arn
    OnlineTrialStackTemplateBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain  # deleted by the custom lambda
      Properties:
        AccessControl: BucketOwnerFullControl
        Tags:
          - Key: Name
            Value: Online Trials Template Bucket
        VersioningConfiguration:
          Status: Enabled
    OnlineTrialStackBuilderIamRole:
      Type: AWS::IAM::Role
      DependsOn:
        - OnlineTrialStackTemplateBucket
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
                  - s3.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialStackBuilderLogsPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialStackBuilderExecPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:CreateStack
                  Resource:
                    - "arn:aws:cloudformation:*:*:*"
          - PolicyName: OnlineTrialStackBuilderBucketReaderPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}/*"
    OnlineTrialScheduledStackBuilder:
      Type: AWS::Lambda::Function
      # should depend on opswork app
      DependsOn:
        - OnlineTrialStackBuilderIamRole
      Properties:
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              // Every n minutes, check we have at least n stacks running that are unassigned (tag)
              // if we have less then n stacks
              //  Work out how many stacks we need to build to get to our Limit
              //  Get the template from the bucket based on the stage
              //  Loop around to build each stack successfully
              //  make sure we are tagging the stacks as unassigned
              // else ALL OK
              callback(null, 'Hello from Lambda');
            };
        Environment:
          Variables:
            stack_count: !Ref MinimumStackCount
            template_bucket_name: !Ref OnlineTrialStackTemplateBucket
            template_bucket_key: !Sub "online-trial-${Stage}.yaml"
        Handler: index.handler
        Role: !GetAtt OnlineTrialStackBuilderIamRole.Arn
        Runtime: nodejs4.3
        Timeout: 10
    OnlineTrialStackBuilderScheduleRule:
      Type: AWS::Events::Rule
      DependsOn:
        - OnlineTrialScheduledStackBuilder
      Properties:
        # Name not provided to allow updates
        Description: Every 5 minutes, check we have enough stacks ready to be assigned
        ScheduleExpression: cron(0/5 * * * ? *) # Runs every 5 minutes
        State: ENABLED
        Targets:
          - Arn: !GetAtt OnlineTrialScheduledStackBuilder.Arn
            Id: !Ref OnlineTrialScheduledStackBuilder
    OnlineTrialStackBuilderInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnlineTrialStackBuilderScheduleRule
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref OnlineTrialScheduledStackBuilder
        Principal: events.amazonaws.com
        SourceArn: !GetAtt OnlineTrialStackBuilderScheduleRule.Arn
    OnlineTrialTemplatesBucketHandlerIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - s3.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: OnlineTrialTemplatesBucketHandlerLoggingPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
          - PolicyName: OnlineTrialStackBuilderBucketReaderPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    - !Sub "arn:aws:s3:::${OnlineTrialStackTemplateBucket}/*"
  Outputs:
    OnlineTrialsRequestEndPoint:
      Description: The URI to test the request of a trial stack
      Value: !Sub "https://${OnlineTrialRequestAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${URI}"
